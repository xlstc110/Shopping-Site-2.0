eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.application.name=api-gateway
server.port=8080

logging.level.root=info
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator=info
logging.level.org.springframework.cloud.gateway=trace

##create multiple route with index and define an ID for each route
##product service route:
spring.cloud.gateway.routes[0].id=product-service
##define the uri that match to this id of service
##API gateway also can act as a load balancer, by replacing http with lb in front of the uri to perform client side load balancing
spring.cloud.gateway.routes[0].uri=lb://product-service
##setting up the predicate to match the uri Path, there are more predicate type to choose, like cookie or request type.
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product

##order service route:
spring.cloud.gateway.routes[1].id=order-service
spring.cloud.gateway.routes[1].uri=lb://order-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/order

##product service route:
spring.cloud.gateway.routes[2].id=product-service
spring.cloud.gateway.routes[2].uri=lb://product-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/product

##discovery server route:
spring.cloud.gateway.routes[3].id=discovery-service
##Since we have one instance of the discovery server, it cannot apply the load balancing feature, the lb cannot be the prefix of uri.
spring.cloud.gateway.routes[3].uri=http://localhost:8761
##if the request is asking for eureka/web, return the eureka's web page port:
spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/web
##use filter for this route to modify the request and remove the parameter:
spring.cloud.gateway.routes[3].filters[0]=SetPath=/

##Define another route so that the Eureka server route is able to load the CSS and JavaScript files.
spring.cloud.gateway.routes[4].id=discovery-service-static
spring.cloud.gateway.routes[4].uri=http://localhost:8761
spring.cloud.gateway.routes[4].predicates[0]=Path=/eureka/**

##configure spring security and keycloak
##Spring Boot at the start time of starting this application will read the discovery document, and fetch all endpoints
##to do the authorization
##Useing the issuer-uri, you do not need to configure all endpoints setting in application.properties file.
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/spring-boot-microservice-realm

##zipkin's port
#spring.zipkin.base-url=http://localhost:9411
##Send 100% of the request that received in the system to Zipkin
#management.tracing.sampling.probability=1.0

